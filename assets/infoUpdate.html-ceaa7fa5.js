import{_ as t,p as e,q as a,a1 as n}from"./framework-5866ffd3.js";const s={},o=n(`<h1 id="infoupdate" tabindex="-1"><a class="header-anchor" href="#infoupdate" aria-hidden="true">#</a> infoUpdate</h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>需要先发送verification请求向邮箱发送验证码才可以操作。<br> 此方法为敏感方法，发现异常会被立刻阻断，客户端需要自备人机验证，API后续开发会提供人机验证。<br> 当更新邮件的时候，需要向两个邮箱（新旧）同时发送infoUpdate验证码，客户端需要判定俩邮箱是否一致。<br> QQ参数只能在QQ机器人那里解绑绑定。<br> 注意，此方法是验证码通过在前，信息检查在后，故一旦信息合法，需要获取新的验证码（冷却不重置）</p></div><h2 id="特殊返回码" tabindex="-1"><a class="header-anchor" href="#特殊返回码" aria-hidden="true">#</a> 特殊返回码</h2><p>&quot;403&quot; 信息有误，详见message参数。<br> &quot;404&quot; 验证码错误。</p><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">type</td><td style="text-align:left;">String</td><td style="text-align:left;">请求类型</td></tr><tr><td style="text-align:left;">token</td><td style="text-align:left;">String</td><td style="text-align:left;">绑定用户的userID</td></tr><tr><td style="text-align:left;">key</td><td style="text-align:left;">String</td><td style="text-align:left;">更新的目标参数（username用户名称，email邮箱，password密码）</td></tr><tr><td style="text-align:left;">value</td><td style="text-align:left;">String</td><td style="text-align:left;">对应参数的信息</td></tr><tr><td style="text-align:left;">code</td><td style="text-align:left;">String</td><td style="text-align:left;">发送verification请求后获得的验证码，verification请求的key参数：infoUpdate</td></tr><tr><td style="text-align:left;">code2</td><td style="text-align:left;">String</td><td style="text-align:left;">只有在更新email的时候才会用到，平时不需要加，作为新邮箱的验证码</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;infoUpdate&quot;</span><span class="token punctuation">,</span> #请求类型
  <span class="token property">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> #token，绑定用户的userID
  <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> #更新的目标参数（username用户名称，email邮箱，password密码）
  <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> #对应参数的信息
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> #发送verification请求后获得的验证码，verification请求的key参数：infoUpdate
  <span class="token property">&quot;code2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span> #只有在更新email的时候才会用到，平时不需要加，作为新邮箱的验证码
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应" aria-hidden="true">#</a> 响应</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span> #返回码
  <span class="token property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123&quot;</span> #响应时间
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),i=[o];function l(r,d){return e(),a("div",null,i)}const c=t(s,[["render",l],["__file","infoUpdate.html.vue"]]);export{c as default};
